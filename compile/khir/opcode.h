#pragma once

#include <cstdint>

namespace kush::khir {

enum class Opcode : uint8_t {
  I1_CONST,
  I8_CONST,
  I16_CONST,
  I32_CONST,
  I64_CONST,
  F64_CONST,
  CHAR_ARRAY_GLOBAL_CONST,
  STRUCT_GLOBAL,
  ARRAY_GLOBAL,
  PTR_GLOBAL,
  RETURN,
  I1_CMP_EQ,
  I1_CMP_NE,
  I1_LNOT,
  I1_ZEXT_I64,
  I8_ADD,
  I8_MUL,
  I8_SUB,
  I8_DIV,
  I8_CMP_EQ,
  I8_CMP_NE,
  I8_CMP_LT,
  I8_CMP_LE,
  I8_CMP_GT,
  I8_CMP_GE,
  I8_ZEXT_I64,
  I16_ADD,
  I16_MUL,
  I16_SUB,
  I16_DIV,
  I16_CMP_EQ,
  I16_CMP_NE,
  I16_CMP_LT,
  I16_CMP_LE,
  I16_CMP_GT,
  I16_CMP_GE,
  I16_ZEXT_I64,
  I32_ADD,
  I32_MUL,
  I32_SUB,
  I32_DIV,
  I32_CMP_EQ,
  I32_CMP_NE,
  I32_CMP_LT,
  I32_CMP_LE,
  I32_CMP_GT,
  I32_CMP_GE,
  I32_ZEXT_I64,
  I64_ADD,
  I64_MUL,
  I64_SUB,
  I64_DIV,
  I64_CMP_EQ,
  I64_CMP_NE,
  I64_CMP_LT,
  I64_CMP_LE,
  I64_CMP_GT,
  I64_CMP_GE,
  I64_CONV_F64,
  F64_ADD,
  F64_MUL,
  F64_SUB,
  F64_DIV,
  F64_CMP_EQ,
  F64_CMP_NE,
  F64_CMP_LT,
  F64_CMP_LE,
  F64_CMP_GT,
  F64_CMP_GE,
  F64_CONV_I64,
  STORE,
  CONDBR,
  LOAD,
  RETURN_VALUE,
  BR,
  PHI_MEMBER,
  CALL,
  PHI,
  PTR_CAST,
  FUNC_ARG,
  NULLPTR,
  ALLOCA,
  CALL_ARG,
  CALL_INDIRECT,
  PTR_ADD
};

}  // namespace kush::khir
